from peewee import *

# Conectar a la base de datos
db = MySQLDatabase('nombre_de_tu_base_de_datos', user='usuario', password='contraseña', host='localhost', port=3306)
db.connect()

# Modelos de las tablas

class Region(Model):
    region_id = IntegerField(primary_key=True)
    region_name = CharField(null=True)
    
    class Meta:
        database = db
        table_name = 'regions'

class Country(Model):
    country_id = CharField(primary_key=True, max_length=2)
    country_name = CharField(null=True, max_length=40)
    region_id = ForeignKeyField(Region, backref='countries')
    
    class Meta:
        database = db
        table_name = 'countries'

class Location(Model):
    location_id = AutoField()
    street_address = CharField(null=True, max_length=40)
    postal_code = CharField(null=True, max_length=12)
    city = CharField(null=False, max_length=30)
    state_province = CharField(null=True, max_length=25)
    country_id = ForeignKeyField(Country, backref='locations')
    
    class Meta:
        database = db
        table_name = 'locations'

class Job(Model):
    job_id = CharField(primary_key=True, max_length=10)
    job_title = CharField(null=False, max_length=35)
    min_salary = DecimalField(max_digits=8, decimal_places=0, null=True)
    max_salary = DecimalField(max_digits=8, decimal_places=0, null=True)
    
    class Meta:
        database = db
        table_name = 'jobs'

class Employee(Model):
    employee_id = AutoField()
    first_name = CharField(null=True, max_length=20)
    last_name = CharField(null=False, max_length=25)
    email = CharField(null=False, max_length=25)
    phone_number = CharField(null=True, max_length=20)
    hire_date = DateField(null=False)
    job_id = ForeignKeyField(Job, backref='employees')
    salary = DecimalField(max_digits=8, decimal_places=2, null=False)
    commission_pct = DecimalField(max_digits=2, decimal_places=2, null=True)
    manager_id = ForeignKeyField('self', null=True, backref='subordinates')
    department_id = IntegerField(null=True)
    
    class Meta:
        database = db
        table_name = 'employees'

class Department(Model):
    department_id = IntegerField(primary_key=True)
    department_name = CharField(null=False, max_length=30)
    manager_id = ForeignKeyField(Employee, null=True, backref='managed_departments')
    location_id = ForeignKeyField(Location, null=True, backref='departments')
    
    class Meta:
        database = db
        table_name = 'departments'

class JobHistory(Model):
    employee_id = ForeignKeyField(Employee, backref='job_history')
    start_date = DateField(null=False)
    end_date = DateField(null=False)
    job_id = ForeignKeyField(Job, backref='job_history')
    department_id = ForeignKeyField(Department, backref='job_history')
    
    class Meta:
        database = db
        table_name = 'job_history'

# Crear las tablas (si no existen)
db.create_tables([Region, Country, Location, Job, Employee, Department, JobHistory])

# Crear un nuevo empleado
new_employee = Employee.create(
    first_name="Juan",
    last_name="Perez",
    email="juan.perez@example.com",
    phone_number="123456789",
    hire_date="2024-11-26",
    job_id="IT_PROG",  # Asegúrate de que este job_id exista en la tabla `jobs`
    salary=50000.00,
    commission_pct=None,
    manager_id=None,
    department_id=1  # Asegúrate de que este department_id exista en la tabla `departments`
)

# Obtener todos los empleados
employees = Employee.select()
for employee in employees:
    print(employee.first_name, employee.last_name)

# Obtener un empleado específico
employee = Employee.get(Employee.employee_id == 1)
print(employee.first_name, employee.last_name)
